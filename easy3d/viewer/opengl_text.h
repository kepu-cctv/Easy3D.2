/**
 * Copyright (C) 2015 by Liangliang Nan (liangliang.nan@gmail.com)
 * https://3d.bk.tudelft.nl/liangliang/
 *
 * This file is part of Easy3D. If it is useful in your research/work,
 * I would be grateful if you show your appreciation by citing it:
 * ------------------------------------------------------------------
 *      Liangliang Nan.
 *      Easy3D: a lightweight, easy-to-use, and efficient C++
 *      library for processing and rendering 3D data. 2018.
 * ------------------------------------------------------------------
 * Easy3D is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License Version 3
 * as published by the Free Software Foundation.
 *
 * Easy3D is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef EASY3D_OPENGL_TEXT_H
#define EASY3D_OPENGL_TEXT_H

#include <vector>
#include <string>


namespace easy3d {

    namespace details {
        struct sth_stash;
    }


    /**
     * OpenGLText enables quick and simple string rendering in OpenGL applications. It supports truetype (TTF) fonts and
     * Unicode strings. All glyphs are cached in OpenGL textures and font rasterization is done using 'stb_truetype.h."
     * TODO: font color; character spacing; retina support; multi-line string rendering (to support line breaks '\n' in strings).
     */

    class OpenGLText {
    public:
        /**
         * Constructor.
         * @param texture_size  The size of the font textures. Suggested values are 512, 1024, 2048 ...
         * @param mipmaps True to create mipmaps for the font textures.
         */
        OpenGLText(int texture_size = 512, bool mipmaps = false);

        /**
         * Destructor.
         */
        ~OpenGLText();

        /**
         * Add a font from a file.
         * @param font_file The font file (.ttf, etc).
         */
        bool add_font(const std::string &font_file);

        /**
         * The number of available fonts.
         */
        int num_fonts() const { return font_ids_.size(); }

        /**
         * Draw the text.
         * @param text The strong to be drawn.
         * @param x
         * @param y
         * @param font_size The font size.
         * @param font_id The id of the font used to draw the text, which is generated by calling to add_font().
         *                0 is the first font, 1 is the second, etc.
         * @return The
         *
         * @Note: This function will draw the text in one line. Line breaks (i.e., "\n") will be ignored.
         * @TODO: Support line breaks and multiple line drawing.
         */
        float draw(const std::string &text, float x, float y, float font_size, int fontID = 0) const;

        /**
         * Get the height of the font.
         * @param font_size The font size.
         * @return The height of the font in pixels.
         */
        float font_height(float font_size) const;

    private:
        details::sth_stash *stash_;
        int texture_size_;
        std::vector<int> font_ids_;
    };

}

#endif
